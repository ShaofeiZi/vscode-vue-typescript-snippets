{
  "Vue Bootstrapping": {
    "prefix": "v-bootstrap",
    "description": "Vue bootstrap snippet",
    "body": [
      "new Vue({",
      "  el: \"#app-main\"",
      "})"
    ]
  },
  "Vue Component": {
    "prefix": "v-component",
    "description": "Vue component snippet",
    "body": [
      "import {Component,Vue} from \"vue-property-decorator\";",
      "",
      "@Component({",
      "\ttemplate: require(\"${feature}.html\")",
      "})",
      "export class ${Feature}Component extends Vue {",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\tmounted() { }$0",
      "}"
    ]
  },
  "Vue Component Http": {
    "prefix": "v-component-http",
    "description": "Vue component with http snippet",
    "body": [
      "import {Component,Vue} from \"vue-property-decorator\";",
      "import axios, { AxiosResponse } from \"axios\";",
      "",
      "@Component({",
      "\ttemplate: require(\"${feature}.html\")",
      "})",
      "export class ${Feature}Component extends Vue {",
      "",
      "\tprivate url = \"\";",
      "",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t\tthis.axios = axios;",
      "\t}",
      "",
      "\tmounted() {",
      "\t\tthis.axios.get(this.url).then((response: AxiosResponse) => {",
      "\t\t\tthis.items = response.data;",
      "\t\t}, (error) => {",
      "\t\t\tconsole.error(error);",
      "\t\t});",
      "}$0",
      "}"
    ]
  },
  "Vue Component Test": {
    "prefix": "v-component-test",
    "description": "Vue component test snippet",
    "body": [
      "import { expect } from \"chai\";",
      "import { ${Feature}Component } from \"./${feature}\";",
      "import { ComponentTest } from \"./component-test\";",
      "",
      "describe(\"${Feature} component\", () => {",
      "\tlet directiveTest: ComponentTest;",
      "\tbeforeEach(() => {",
      "\t\tdirectiveTest = new ComponentTest(\"<div><${feature}></${feature}></div>\", { \"${feature}\": ${Feature}Component });",
      "\t});",
      "\tit(\"should render correct contents\", async () => {",
      "\t\tdirectiveTest.createComponent();",
      "\t\tawait directiveTest.execute((vm) => {",
      "\t\t\texpect(vm.$el.querySelector(\".someClass\").textContent).toBe(\"\");",
      "\t\t});",
      "\t});",
      "});"
    ]
  },
  "Vue Component Test Helper": {
    "prefix": "v-test-helper",
    "description": "Vue test helper snippet",
    "body": [
      "import Vue from \"vue\";",
      "import merge from \"lodash.merge\";",
      "import { ILogger } from \"./log\";",
      "",
      "export interface IComponents {",
      "\t[key: string]: Vue.Component;",
      "}",
      "",
      "export class ComponentTest {",
      "\tpublic vm: Vue;",
      "\tconstructor(private template: string, private components: IComponents) {",
      "\t}",
      "",
      "\tpublic createComponent(createOptions?: any): void {",
      "\t\tlet options = {",
      "\t\t\ttemplate: this.template,",
      "\t\t\tcomponents: this.components",
      "\t\t};",
      "\t\tif (createOptions) merge(options, createOptions);",
      "\t\tthis.vm = new Vue(options).$mount();",
      "\t}",
      "",
      "\tpublic async execute(callback: (vm: Vue) => Promise<void> | void): Promise<void> {",
      "\t\tawait Vue.nextTick();",
      "\t\tawait callback(this.vm);",
      "\t}",
      "}"
    ]
  },
  "Vue Routes": {
    "prefix": "v-routing",
    "description": "Vue routing file snippet",
    "body": [
      "import Vue from \"vue\";",
      "import VueRouter from \"vue-router\";",
      "",
      "Vue.use(VueRouter);",
      "",
      "let router = new VueRouter({",
      "\troutes: [",
      "\t\t{ path: '${path}', component: ${Name}Component },",
      "\t]",
      "});",
      "",
      "new Vue({",
      "\tel: \"#app-main\",",
      "\trouter: router",
      "})"
    ]
  },
  "Vue Service Class": {
    "prefix": "v-service",
    "description": "Service class snippet",
    "body": [
      "class ${Feature}Service {",
      "",
      "\tprivate static _instance: ${Feature}Service;",
      "",
      "\tprivate constructor() {",
      "\t}",
      "",
      "\tstatic createInstance() {",
      "\t\t${Feature}Service.getInstance();",
      "\t}",
      "",
      "\tstatic getInstance() {",
      "\t\treturn this._instance || (this._instance = new this());",
      "\t}",
      "$0",
      "}"
    ]
  },
  "Vuex Store": {
    "prefix": "v-store",
    "description": "Vuex store snippet",
    "body": [
      "import axios from \"axios\";",
      "import { ActionContext, Store } from \"vuex\";",
      "import { getStoreAccessors } from \"vuex-typescript\";",
      "",
      "export interface Product {",
      "\tid: number;",
      "\tname: string;",
      "\tunitPrice: number;",
      "}",
      "",
      "export interface ProductInBasket {",
      "\tproduct: Product;",
      "\tisSelected: boolean;",
      "}",
      "",
      "export interface BasketState {",
      "\titems: ProductInBasket[];",
      "\ttotalAmount: number;",
      "}",
      "",
      "type BasketContext = ActionContext<BasketState, BasketState>;",
      "",
      "export const basket = {",
      "\tnamespaced: false,",
      "",
      "\tstate: {",
      "\t\titems: [],",
      "\t\ttotalAmount: 0,",
      "\t},",
      "",
      "\tgetters: {",
      "\t\tgetProductNames(state: BasketState) {",
      "\t\t\treturn state.items.map((item) => item.product.name);",
      "\t\t},",
      "\t\tgetTotalAmountWithoutDiscount(state: BasketState) {",
      "\t\t\treturn state.items.reduce((total, item) => total + item.product.unitPrice, 0);",
      "\t\t},",
      "\t},",
      "",
      "\tmutations: {",
      "\t\tappendItem(state: BasketState, item: { product: Product; atTheEnd: boolean }) {",
      "\t\t\tstate.items.push({ product: item.product, isSelected: false });",
      "\t\t},",
      "\t\tsetTotalAmount(state: BasketState, totalAmount: number) {",
      "\t\t\tstate.totalAmount = totalAmount;",
      "\t\t},",
      "\t},",
      "",
      "\tactions: {",
      "\t\tasync updateTotalAmount(context: BasketContext, discount: number): Promise<void> {",
      "\t\t\tconst totalBeforeDiscount = readTotalAmountWithoutDiscount(context);",
      "\t\t\tconst response = await axios.get(`/api/calculatetotal/\\${totalBeforeDiscount}/\\${discount}`);",
      "\t\t\tcommitSetTotalAmount(context, response.data.totalAfterDiscount);",
      "\t\t},",
      "\t},",
      "};",
      "",
      "export const createStore = () => new Store<BasketState>(basket);",
      "",
      "const { commit, read, dispatch } =",
      "\t getStoreAccessors<BasketState, BasketState>(\"\"); // We pass namespace here, if we make the module namespaced: true.",
      "",
      "export const readProductNames = read(basket.getters.getProductNames);",
      "export const readTotalAmountWithoutDiscount = read(basket.getters.getTotalAmountWithoutDiscount);",
      "export const dispatchUpdateTotalAmount = dispatch(basket.actions.updateTotalAmount);",
      "export const commitAppendItem = commit(basket.mutations.appendItem);",
      "export const commitSetTotalAmount = commit(basket.mutations.setTotalAmount);",
      "$0",
      ""
    ]
  },
  "Vue Component using Vuex store": {
    "prefix": "v-component-store",
    "description": "Vue component using Vuex store snippet",
    "body": [
      "import {Component,Vue} from \"vue-property-decorator\";",
      "import { readProductNames, readTotalAmountWithoutDiscount, dispatchUpdateTotalAmount } from \"./store\";",
      "",
      "@Component({",
      "\ttemplate: require(\"./basket.html\")",
      "})",
      "export class BasketComponent extends Vue {",
      "\t",
      "\tget productNames() {",
      "\t\treturn readProductNames(this.\\$store);",
      "\t}",
      "",
      "\tget totalAmountWithoutDiscount() {",
      "\t\treturn readTotalAmountWithoutDiscount(this.\\$store);",
      "\t}",
      "",
      "\tupdateTotal() {",
      "\t\tdispatchUpdateTotalAmount(this.\\$store, 10);",
      "\t}",
      "}",
      "$0",
      ""
    ]
  }
}
